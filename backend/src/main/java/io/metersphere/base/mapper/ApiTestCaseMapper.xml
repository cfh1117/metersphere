<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ApiTestCaseMapper">
    <resultMap id="BaseResultMap" type="io.metersphere.base.domain.ApiTestCase">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="project_id" jdbcType="VARCHAR" property="projectId"/>
        <result column="api_definition_id" jdbcType="VARCHAR" property="apiDefinitionId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="priority" jdbcType="VARCHAR" property="priority"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="create_user_id" jdbcType="VARCHAR" property="createUserId"/>
        <result column="update_user_id" jdbcType="VARCHAR" property="updateUserId"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="update_time" jdbcType="BIGINT" property="updateTime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.metersphere.base.domain.ApiTestCase">
        <result column="request" jdbcType="LONGVARCHAR" property="request"/>
        <result column="response" jdbcType="LONGVARCHAR" property="response"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, project_id, name,api_definition_id,priority,description, create_user_id, update_user_id, create_time, update_time
  </sql>
    <sql id="Blob_Column_List">
    request
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="io.metersphere.base.domain.ApiTestCaseExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from api_test_case
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <select id="list" resultType="io.metersphere.api.dto.definition.ApiTestCaseResult">
        select atc.id, atc.project_id,
        atc.name,atc.priority,atc.api_definition_id,T1.name as createUser ,T2.name as updateUser,
        atc.description,atc.request,atc.response,atc.create_user_id,
        atc.create_time,atc.update_user_id, atc.update_time,ader.status execResult
        from api_test_case atc left join user T1 on atc.create_user_id = T1.id left join user T2 on
        atc.update_user_id = T2.id left join api_definition_exec_result ader on atc.id = ader.resource_id
        <where>
            <if test="request.name != null and request.name!=''">

                and atc.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.id != null and request.id!=''">
                AND atc.id = #{request.id}
            </if>
            <if test="request.priority != null and request.priority!=''">
                AND atc.priority = #{request.priority}
            </if>
            <if test="request.projectId != null and request.projectId!=''">
                AND atc.project_id = #{request.projectId}
            </if>
            <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
                AND atc.api_definition_id = #{request.apiDefinitionId}
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                atc.${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="selectByExample" parameterType="io.metersphere.base.domain.ApiTestCaseExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from api_test_case
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from api_test_case
        where id = #{id,jdbcType=VARCHAR}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
      delete from api_test_case  where id = #{id,jdbcType=VARCHAR}
   </delete>

    <delete id="deleteByExample" parameterType="io.metersphere.base.domain.ApiTestCaseExample">
        delete from api_test_case
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>

    <insert id="insert" parameterType="io.metersphere.base.domain.ApiTestCase">
    insert into api_test_case (id, project_id, name, priority,api_definition_id,description, create_user_id, update_user_id,
      create_time, update_time, request,response
      )
    values (#{id,jdbcType=VARCHAR}, #{projectId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},  #{priority,jdbcType=VARCHAR}, #{apiDefinitionId,jdbcType=VARCHAR},#{description,jdbcType=VARCHAR},
     #{createUserId,jdbcType=VARCHAR}, #{updateUserId,jdbcType=VARCHAR},
      #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}, #{request,jdbcType=LONGVARCHAR}, #{response,jdbcType=LONGVARCHAR})
  </insert>

    <select id="countByExample" parameterType="io.metersphere.base.domain.ApiTestCaseExample"
            resultType="java.lang.Long">
        select count(*) from api_test_case
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>

    <update id="updateByPrimaryKeySelective" parameterType="io.metersphere.base.domain.ApiTestCase">
        update api_test_case
        <set>
            <if test="projectId != null">
                project_id = #{projectId,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>

            <if test="apiDefinitionId != null">
                api_definition_id = #{apiDefinitionId,jdbcType=BIGINT},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=LONGVARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="updateUserId != null">
                update_user_id = #{updateUserId,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=BIGINT},
            </if>
            <if test="request != null">
                request = #{request,jdbcType=LONGVARCHAR},
            </if>
            <if test="response != null">
                response = #{response,jdbcType=LONGVARCHAR},
            </if>

        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>

    <update id="updateByPrimaryKey" parameterType="io.metersphere.base.domain.ApiTestCase">
        update api_test_case
        set project_id = #{projectId,jdbcType=VARCHAR},
          name = #{name,jdbcType=VARCHAR},
          api_definition_id = #{apiDefinitionId,jdbcType=VARCHAR},
          priority = #{priority,jdbcType=VARCHAR},
          description = #{description,jdbcType=VARCHAR},
          update_user_id = #{updateUserId,jdbcType=VARCHAR},
          update_time = #{updateTime,jdbcType=BIGINT}
        where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>