<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ApiDefinitionMapper">
    <resultMap id="BaseResultMap" type="io.metersphere.base.domain.ApiDefinition">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="project_id" jdbcType="VARCHAR" property="projectId"/>
        <result column="module_id" jdbcType="VARCHAR" property="moduleId"/>
        <result column="module_path" jdbcType="VARCHAR" property="modulePath"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="protocol" jdbcType="VARCHAR" property="protocol"/>
        <result column="path" jdbcType="VARCHAR" property="path"/>
        <result column="method" jdbcType="VARCHAR" property="method"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="user_id" jdbcType="VARCHAR" property="userId"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="update_time" jdbcType="BIGINT" property="updateTime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.metersphere.base.domain.ApiDefinition">
        <result column="request" jdbcType="LONGVARCHAR" property="request"/>
        <result column="response" jdbcType="LONGVARCHAR" property="response"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, project_id, name,module_id,module_path,protocol ,path,method ,description, status, user_id, create_time, update_time
  </sql>
    <sql id="Blob_Column_List">
    request
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="io.metersphere.base.domain.ApiDefinitionExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from api_definition
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>


    <select id="selectByIds" resultType="io.metersphere.api.dto.definition.ApiComputeResult">
        select t1.api_definition_id apiDefinitionId,count(t1.id) caseTotal,
        case t2.status
        when 'success' then '通过'
        when 'error' then '未通过'
        ELSE '未执行' end as status ,
        CONCAT(FORMAT(SUM(IF(t2.`status` = 'success', 1, 0))/ COUNT(t1.id)*100, 2), '%') passRate
        from api_test_case t1 left join api_definition_exec_result t2 on t1.id = t2.resource_id
        group by t1.api_definition_id having t1.api_definition_id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
        order by t2.end_time desc;
    </select>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and api_definition.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and api_definition.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.projectName != null">
            and project.name
            <include refid="condition">
                <property name="object" value="${condition}.projectName"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and api_definition.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and api_definition.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and api_definition.user_id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <select id="list" resultType="io.metersphere.api.dto.definition.ApiDefinitionResult">
        select api_definition.id, api_definition.project_id,
        api_definition.name,api_definition.protocol,api_definition.path,api_definition.module_id,api_definition.module_path,api_definition.method,
        api_definition.description,api_definition.request,api_definition.response,api_definition.environment_id,
        api_definition.status, api_definition.user_id, api_definition.create_time, api_definition.update_time, project.name as
        project_name, user.name as user_name
        from api_definition
        left join project on api_definition.project_id = project.id
        left join user on api_definition.user_id = user.id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>
            <if test="request.name != null">
                and api_definition.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.protocol != null">
                AND api_definition.protocol = #{request.protocol}
            </if>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.projectId != null">
                AND project.id = #{request.projectId}
            </if>
            <if test="request.id != null">
                AND api_definition.id = #{request.id}
            </if>
            <if test="request.userId != null">
                AND api_definition.user_id = #{request.userId}
            </if>
            <if test="request.moduleId != null">
                AND api_definition.module_id = #{request.moduleId}
            </if>
            <if test="request.projectId != null">
                AND api_definition.project_id = #{request.projectId}
            </if>
            <if test="request.moduleIds != null and request.moduleIds.size() > 0">
                AND api_definition.module_id in
                <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                and api_definition.status in
                <foreach collection="request.filters" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                api_definition.${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="selectByExample" parameterType="io.metersphere.base.domain.ApiDefinitionExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from api_definition
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from api_definition
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from api_definition
    where id = #{id,jdbcType=VARCHAR}
  </delete>

    <delete id="deleteByExample" parameterType="io.metersphere.base.domain.ApiDefinitionExample">
        delete from api_definition
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>

    <insert id="insert" parameterType="io.metersphere.base.domain.ApiDefinition">
        insert into api_definition (id, project_id, name, protocol,path,module_id,module_path,method,
          description, status, user_id,create_time, update_time, request,response,environment_id )
        values
         (#{id,jdbcType=VARCHAR}, #{projectId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},  #{protocol,jdbcType=VARCHAR},#{path,jdbcType=VARCHAR}, #{moduleId,jdbcType=VARCHAR},#{modulePath,jdbcType=VARCHAR},#{method,jdbcType=VARCHAR},
          #{description,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR},
          #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}, #{request,jdbcType=LONGVARCHAR},#{response,jdbcType=LONGVARCHAR},#{environmentId,jdbcType=VARCHAR}
          )
    </insert>

    <select id="countByExample" parameterType="io.metersphere.base.domain.ApiDefinitionExample"
            resultType="java.lang.Long">
        select count(*) from api_definition
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>

    <update id="updateByPrimaryKeySelective" parameterType="io.metersphere.base.domain.ApiDefinition">
        update api_definition
        <set>
            <if test="projectId != null">
                project_id = #{projectId,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>

            <if test="moduleId != null">
                module_id = #{moduleId,jdbcType=VARCHAR},
            </if>
            <if test="protocol != null">
                protocol = #{protocol,jdbcType=VARCHAR},
            </if>
            <if test="path != null">
                path = #{path,jdbcType=VARCHAR},
            </if>
            <if test="method != null">
                method = #{method,jdbcType=VARCHAR},
            </if>
            <if test="modulePath != null">
                module_path = #{modulePath,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=BIGINT},
            </if>
            <if test="request != null">
                request = #{request,jdbcType=LONGVARCHAR},
            </if>
            <if test="response != null">
                response = #{response,jdbcType=LONGVARCHAR},
            </if>
            <if test="environmentId != null">
                environment_id = #{environmentId,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.metersphere.base.domain.ApiDefinition">
        update api_definition
        set project_id = #{projectId,jdbcType=VARCHAR},
          name = #{name,jdbcType=VARCHAR},
          description = #{description,jdbcType=VARCHAR},
          status = #{status,jdbcType=VARCHAR},
          user_id = #{userId,jdbcType=VARCHAR},
          module_id = #{moduleId,jdbcType=VARCHAR},
          module_path = #{modulePath,jdbcType=VARCHAR},
          protocol = #{protocol,jdbcType=VARCHAR},
          path = #{path,jdbcType=VARCHAR},
          method = #{method,jdbcType=VARCHAR},
          create_time = #{createTime,jdbcType=BIGINT},
          update_time = #{updateTime,jdbcType=BIGINT},
          request = #{request,jdbcType=LONGVARCHAR},
          response = #{response,jdbcType=LONGVARCHAR},
          environment_id = #{environmentId,jdbcType=VARCHAR}
        where id = #{id,jdbcType=VARCHAR}
  </update>
    <update id="updateByPrimaryKey" parameterType="io.metersphere.base.domain.ApiDefinition">
        update api_definition
        set project_id = #{projectId,jdbcType=VARCHAR},
          name = #{name,jdbcType=VARCHAR},
          module_id = #{moduleId,jdbcType=VARCHAR},
          protocol = #{protocol,jdbcType=VARCHAR},
          path = #{path,jdbcType=VARCHAR},
          module_path = #{modulePath,jdbcType=VARCHAR},
          method = #{method,jdbcType=VARCHAR},
          description = #{description,jdbcType=VARCHAR},
          status = #{status,jdbcType=VARCHAR},
          user_id = #{userId,jdbcType=VARCHAR},
          create_time = #{createTime,jdbcType=BIGINT},
          update_time = #{updateTime,jdbcType=BIGINT}
        where id = #{id,jdbcType=VARCHAR}
  </update>

    <update id="removeToGc">
        update api_definition
        set
        status = 'Trash'
        where id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </update>
</mapper>